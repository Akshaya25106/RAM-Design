module SyncRAM #(parameter DATA_WIDTH = 8, parameter ADDR_WIDTH = 4) 
(   input wire clk,
    input wire we,  
    input wire [ADDR_WIDTH-1:0] addr,
    input wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout);

   
    reg [DATA_WIDTH-1:0] ram [2**ADDR_WIDTH-1:0];

    assign dout = ram[addr];

    always @(posedge clk) begin
        if (we)  
            ram[addr] <= din;
    end

endmodule

// Testbench
module SyncRAM_tb;
    reg clk;
    reg we;
    reg [3:0] addr;
    reg [7:0] din;
    wire [7:0] dout;
    
    SyncRAM uut (
        .clk(clk),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout));
    
    initial begin
        clk = 0;
        forever #5 clk = ~clk; 
    end
    
    initial begin
        $monitor("Time=%0t --we=%b addr=%h din=%h dout=%h", $time, we, addr, din, dout);
        
        // Write Operations
        we = 1; addr = 4'h1; din = 8'hAA; #10;
        we = 1; addr = 4'h2; din = 8'hBB; #10;
        we = 1; addr = 4'h3; din = 8'hCC; #10;
        
        // Read Operations
        we = 0; addr = 4'h1; #10;
        we = 0; addr = 4'h2; #10;
        we = 0; addr = 4'h3; #10;
        
        $finish;
    end
endmodule
